// 使用闭包实现
/*
原理：在每次循环的时候，立即执行函数内部创建了一个新的函数作用域，并将当前循环迭代的i值作为参数传递给该函数。这样，每个立即执行函数在自己的函数作用域中都有一个独立的i变量。

当setTimeout函数被调用时，它会创建一个闭包，该闭包中存储了对立即执行函数中i的引用，由于每个闭包都是在不同的函数作用域中创建的，它们分别引用了不同的i值。

因此，每个setTimeout回调函数在执行时，都可以访问到它们各自闭包中存储的独立的i值。这使得每个回调函数打印出了对应的i值，从而实现了每个i是独立的效果。

通过使用立即执行函数以及闭包，可以解决常见的循环中异步操作导致的变量共享问题，确保每个异步操作都能访问到它们各自的独立变量值。
*/
for (var i = 0; i < 5; i++) {
  (function (i) {
    setTimeout(() => {
      console.log(i);
    }, i * 1000);
  })(i);
}
// 块级作用域
for (let i = 0; i < 5; i++) {
  setTimeout(() => {
    console.log(i);
  }, i * 1000);
}
